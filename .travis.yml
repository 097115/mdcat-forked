sudo: false
language: rust
# We deliberately do NOT cache with `cache: cargo` because these caches grow to
# gigabytes in size at which point downloading, unpacking and repacking takes
# way longer than just building things fresh every time.

addons:
  apt:
    packages:
      # Install musl for some Linux builds
      - musl-tools

env:
  global:
    - ANSI2HTML_VERSION=1.4.2
before_install:
  # For formatting tests
  - pip install --user ansi2html==${ANSI2HTML_VERSION}
# Default script for test stage
script:
  - cargo build --target $CARGOTARGET $CARGOFLAGS --verbose
  - cargo test --target $CARGOTARGET $CARGOFLAGS --verbose
  # Make sure that we can format w/o panic or error
  - cargo run --target $CARGOTARGET $CARGOFLAGS -- sample/common-mark.md

# Check formatting before running tests, and lint afterwards
stages:
  - formatting
  - test
  - lint
  - release
jobs:
  include:
      # Check formatting on rust stable before anything else
    - stage: formatting
      os: linux
      rust: stable
      before_script: rustup component add rustfmt-preview
      script: cargo fmt -- --check

    # Base line for backwards compatibility
    - stage: test
      os: linux
      rust: '1.27.2'
      env:
        - CARGOTARGET=x86_64-unknown-linux-gnu
    # Our target Rust version.  We test:
    #
    # - A standard linux build
    # - --no-default-features to make sure things build in other configurations
    # - A static musl build
    # - macOS
    # - Windows
    - stage: test
      os: linux
      rust: stable
      env:
        - CARGOTARGET=x86_64-unknown-linux-gnu
    - stage: test
      os: linux
      rust: stable
      env:
        - CARGOTARGET=x86_64-unknown-linux-gnu
        - CARGOFLAGS='--no-default-features'
    - stage: test
      os: linux
      rust: stable
      env:
        - CARGOTARGET=x86_64-unknown-linux-musl
        - CARGOFLAGS='--no-default-features --features terminology'
      before_script: rustup target add x86_64-unknown-linux-musl
    - stage: test
      os: osx
      rust: stable
      before_script:
        # Add local Python scripts to path for ansi2html
        - export PATH="$HOME/Library/Python/2.7/bin:$PATH"
      env:
        - CARGOTARGET=x86_64-apple-darwin
    - stage: test
      os: windows
      rust: stable
      env:
        - CARGOTARGET=x86_64-pc-windows-msvc
    # Catch regressions in beta and nightly
    - stage: test
      os: linux
      rust: beta
      env:
        - CARGOTARGET=x86_64-unknown-linux-gnu
    - stage: test
      os: linux
      rust: nightly
      env:
        - CARGOTARGET=x86_64-unknown-linux-gnu

    # Run clippy after testing, with and without features.
    - &lint-settings
      stage: lint
      os: linux
      rust: stable
      before_script: rustup component add clippy-preview
      script: cargo clippy $CARGOFLAGS
    - <<: *lint-settings
      env:
        - CARGOFLAGS=--no-default-features

    # Deploy binary to GitHub
    - &deploy-settings
      stage: release
      # Our release tags start with "mdcat-", so we only build for such tags
      if: tag =~ ^mdcat-
      os: linux
      rust: stable
      before_install: rustup target add x86_64-unknown-linux-musl
      env:
        - CARGOTARGET=x86_64-unknown-linux-musl
        # Exclude iterm2 from release artifacts on Linux, and build against Musl
        - CARGOFLAGS='--no-default-features --features terminology'
      # Inhibit Travisâ€™ default "cargo build --verbose" install step because we
      # make an explicit release build in the "script" phase
      install: ""
      script: cargo build --target "$CARGOTARGET" $CARGOFLAGS --release --verbose
      before_deploy:
        - export ARCHIVE_NAME="${TRAVIS_TAG}-${CARGOTARGET}"
        - echo "Building ${ARCHIVE_NAME}"
        - mkdir "/tmp/${ARCHIVE_NAME}"
        - cp README.md CHANGELOG.md LICENSE "/tmp/${ARCHIVE_NAME}"
        - cp "target/${CARGOTARGET}/release/mdcat" "/tmp/${ARCHIVE_NAME}"
        # Strip the binary to reduce its size
        - strip "/tmp/${ARCHIVE_NAME}/mdcat"
        - tar -czf "/tmp/${ARCHIVE_NAME}.tar.gz" -C /tmp/ "${ARCHIVE_NAME}"
      deploy:
        skip_cleanup: true
        provider: releases
        api_key:
          secure: evXKPmDHaIxS2DEx357DPHbA5LzMBzCwYos6IVQmqFC3L3/Iz3vBo9/DZ2ZO14b72JIqps/t3vTpXvCPSK/L+LUcCger3fQUpvCMusPzQbldJhifyOdaU5SfAAu7/SetEbalEN0Xzp289HWrQgcJAeoUePwXEYitbvz68HP3cPoAmDM/Mlp+7bdfivt99xTBAH2BVa42pmaUO1itmdnAGpj4IoBDpw8nsCjmWVTjhzsP7O5HPx+36JwdhKeGYO+cP9/Ja4rOaPe5vJNHJLlUcyosXCZyZ+9p/6EZN0TJJnXIuGnkugm6BHYP2PiOwadCKMnd4FQCqLPEAm59OSo7yTtDtJRGTpMlJz59s+GPIG2EiFxhPWD0tL8QVMRP9QUKHPqFBCTPDgcDOW10PzGJtkIE1fEUZ4primoQ6GsPtxEsHY9wSkZ2bL/teRF1i3E6X1aHVUp/7lNBdNqFyXbzfR4Av2pkw8cQrJjVesHDNiV3XkxZr4AMUh356BsemECnvcvurWJEElU86HoNg5VRFLjjHqp4EIck+QjH5WejW/nbg7SWdGvLK1gOPXPxznn5J7trCGj1ULyzwrTYlVw9O4A+yJmOis3BRxzuOS0pNKh/yRdsEF/f+DcoAqBTHQLGGcjNmBF0R5PbJGPO7bY9spjt/g57QT2iwQ03klbu/ns=
        file: /tmp/${ARCHIVE_NAME}.tar.gz
        on:
          tags: true
    - <<: *deploy-settings
      os: osx
      before_install: ""
      env:
        - CARGOTARGET=x86_64-apple-darwin
        # Only include iterm2 when building for macos, and also enable remote
        # resources for iterm2
        - CARGOFLAGS='--no-default-features --features iterm2,remote_resources'
